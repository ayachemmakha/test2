import streamlit as st
import joblib
import numpy as np

# Charger le mod√®le
model = joblib.load("model.pkl")

# Configuration de la page
st.set_page_config(page_title="Pr√©dicteur Publicit√© R√©seau Social", layout="centered")

# Titre
st.title("üì± Pr√©diction d'Achat via Publicit√© R√©seau Social")
st.markdown("Entrez les informations d‚Äôun utilisateur pour pr√©dire s‚Äôil ach√®tera le produit ou non.")

# Formulaire utilisateur
with st.form("user_input_form"):
    gender = st.selectbox("Genre", ("Homme", "Femme"))
    age = st.slider("√Çge", 18, 70, 30)
    salary = st.number_input("Salaire estim√© (‚Ç¨)", min_value=10000, max_value=150000, value=40000, step=5000)
    
    submitted = st.form_submit_button("Pr√©dire")

# Encoder le genre et faire une pr√©diction
if submitted:
    gender_encoded = 1 if gender == "Homme" else 0
    input_data = np.array([[age, salary]])

    # Si tu as normalis√© les donn√©es avant l'entra√Ænement
    scaler = joblib.load("scaler.pkl") if "scaler.pkl" in model.__dict__ else None
    if scaler:
        input_data = scaler.transform(input_data)

    prediction = model.predict(input_data)[0]
    proba = model.predict_proba(input_data)[0][1] if hasattr(model, "predict_proba") else None

    # R√©sultat
    if prediction == 1:
        st.success("‚úÖ L'utilisateur **ach√®tera** probablement le produit.")
    else:
        st.warning("‚ùå L'utilisateur **n‚Äôach√®tera pas** le produit.")

    if proba is not None:
        st.markdown(f"**Probabilit√© d'achat :** {proba:.2%}")

# Pied de page
st.markdown("---")
st.caption("üìä Projet r√©alis√© avec Streamlit, Scikit-learn et Python")
